generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(USER)
  messagesUsed  Int       @default(0)
  messageLimit  Int       @default(10)
  lastReset     DateTime  @default(now())
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  conversations Conversation[]
  knowledgeBase KnowledgeBase[]
  
  @@map("users")
}

model Conversation {
  id        String    @id @default(cuid())
  title     String?
  userId    String
  agentId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent    Agent     @relation(fields: [agentId], references: [id])
  messages Message[]
  
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           MessageRole
  conversationId String
  model          String?
  tokens         Int?
  createdAt      DateTime     @default(now())
  status         MessageStatus? @default(SENT)
  
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Agent {
  id          String   @id @default(cuid())
  name        String
  description String
  systemPrompt String
  avatar      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  conversations Conversation[]
  knowledgeBase KnowledgeBase[]
  
  @@map("agents")
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  title     String
  content   String
  tags      String[]
  userId    String
  agentId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent Agent? @relation(fields: [agentId], references: [id])
  
  @@map("knowledge_base")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum MessageStatus {
  SENT
  FAILED
  EDITED
  DELETED
  RETRY
}
